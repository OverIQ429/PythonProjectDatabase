import psycopg2
from psycopg2.extras import RealDictCursor
import sys
from datetime import datetime


class CafeDatabaseManager:
    def __init__(self):
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–±—â–µ–π –±–∞–∑–µ (–ø–æ—Ä—Ç 5432)
        self.common_conn = psycopg2.connect(
            host="localhost",
            port="5432",
            database="cafe_common",
            user="postgres",
            password="postgres"
        )

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ —Ñ–∏–ª–∏–∞–ª–∞ (–ø–æ—Ä—Ç 5433)
        self.branch_conn = psycopg2.connect(
            host="localhost",
            port="5433",
            database="cafe_branch_1",
            user="postgres",
            password="postgres"
        )

    def close_connections(self):
        self.common_conn.close()
        self.branch_conn.close()


    def create_dish(self, name, description, price, category_id):
        """CREATE: –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –±–ª—é–¥–æ –≤ –æ–±—â—É—é –±–∞–∑—É"""
        with self.common_conn.cursor() as cursor:
            cursor.execute("""
                INSERT INTO dishes (name, description, base_price, category_id)
                VALUES (%s, %s, %s, %s) RETURNING id
            """, (name, description, price, category_id))
            dish_id = cursor.fetchone()[0]
            self.common_conn.commit()
            print(f" –ë–ª—é–¥–æ '{name}' —Å–æ–∑–¥–∞–Ω–æ —Å ID: {dish_id}")
            return dish_id

    def read_dishes(self, category_id=None):
        """READ: –ü–æ–ª—É—á–∏—Ç—å –±–ª—é–¥–∞ –∏–∑ –æ–±—â–µ–π –±–∞–∑—ã"""
        with self.common_conn.cursor(cursor_factory=RealDictCursor) as cursor:
            if category_id:
                cursor.execute("""
                    SELECT d.*, dc.name as category_name 
                    FROM dishes d 
                    LEFT JOIN dishcategories dc ON d.category_id = dc.id
                    WHERE d.category_id = %s AND d.is_active = true
                """, (category_id,))
            else:
                cursor.execute("""
                    SELECT d.*, dc.name as category_name 
                    FROM dishes d 
                    LEFT JOIN dishcategories dc ON d.category_id = dc.id
                    WHERE d.is_active = true
                """)

            dishes = cursor.fetchall()
            print("üçΩÔ∏è  –°–ø–∏—Å–æ–∫ –±–ª—é–¥:")
            for dish in dishes:
                print(f"  {dish['id']}: {dish['name']} - {dish['base_price']} —Ä—É–±. ({dish['category_name']})")
            return dishes

    def update_dish_price(self, dish_id, new_price):
        """UPDATE: –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –±–ª—é–¥–∞ –≤ –æ–±—â–µ–π –±–∞–∑–µ"""
        with self.common_conn.cursor() as cursor:
            cursor.execute("""
                UPDATE dishes SET base_price = %s WHERE id = %s
            """, (new_price, dish_id))
            self.common_conn.commit()
            print(f" –¶–µ–Ω–∞ –±–ª—é–¥–∞ ID {dish_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_price} —Ä—É–±.")

    def deactivate_dish(self, dish_id):
        """DELETE: –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–ª—é–¥–æ –≤ –æ–±—â–µ–π –±–∞–∑–µ"""
        with self.common_conn.cursor() as cursor:
            cursor.execute("""
                UPDATE dishes SET is_active = false WHERE id = %s
            """, (dish_id,))
            self.common_conn.commit()
            print(f"üö´ –ë–ª—é–¥–æ ID {dish_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")

    # === CRUD –¥–ª—è –ö–õ–ò–ï–ù–¢–û–í (cafe_branch_1 - –ø–æ—Ä—Ç 5433) ===

    def create_customer(self, first_name, last_name, phone, email=None):
        """CREATE: –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É —Ñ–∏–ª–∏–∞–ª–∞"""
        with self.branch_conn.cursor() as cursor:
            cursor.execute("""
                INSERT INTO customers (first_name, last_name, phone, email)
                VALUES (%s, %s, %s, %s) RETURNING id
            """, (first_name, last_name, phone, email))
            customer_id = cursor.fetchone()[0]
            self.branch_conn.commit()
            print(f"üë§ –ö–ª–∏–µ–Ω—Ç '{first_name} {last_name}' —Å–æ–∑–¥–∞–Ω —Å ID: {customer_id}")
            return customer_id

    def read_customers(self):
        """READ: –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã —Ñ–∏–ª–∏–∞–ª–∞"""
        with self.branch_conn.cursor(cursor_factory=RealDictCursor) as cursor:
            cursor.execute("""
                SELECT * FROM customers 
                ORDER BY registration_date DESC
            """)
            customers = cursor.fetchall()
            print("üë• –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:")
            for customer in customers:
                points = f", {customer['loyalty_points']} –±–∞–ª–ª–æ–≤" if customer['loyalty_points'] else ""
                print(
                    f"  {customer['id']}: {customer['first_name']} {customer['last_name']} - {customer['phone']}{points}")
            return customers

    def update_customer_loyalty(self, customer_id, points):
        """UPDATE: –û–±–Ω–æ–≤–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã –∫–ª–∏–µ–Ω—Ç–∞"""
        with self.branch_conn.cursor() as cursor:
            cursor.execute("""
                UPDATE customers SET loyalty_points = %s WHERE id = %s
            """, (points, customer_id))
            self.branch_conn.commit()
            print(f"‚≠ê –ö–ª–∏–µ–Ω—Ç—É ID {customer_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤")

    # === CRUD –¥–ª—è –ó–ê–ö–ê–ó–û–í (cafe_branch_1 - –ø–æ—Ä—Ç 5433) ===

    def create_order(self, employee_id, table_id, customer_id=None):
        """CREATE: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ —Ñ–∏–ª–∏–∞–ª–∞"""
        with self.branch_conn.cursor() as cursor:
            cursor.execute("""
                INSERT INTO orders (employee_id, table_id, customer_id)
                VALUES (%s, %s, %s) RETURNING id
            """, (employee_id, table_id, customer_id))
            order_id = cursor.fetchone()[0]
            self.branch_conn.commit()
            print(f"üìù –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —Å ID: {order_id}")
            return order_id

    def add_dish_to_order(self, order_id, dish_id, quantity):
        """CREATE: –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ –≤ –∑–∞–∫–∞–∑ (–º–µ–∂–±–∞–∑–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)"""
        try:
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –±–ª—é–¥–∞ –∏–∑ –û–ë–©–ï–ô –±–∞–∑—ã (–ø–æ—Ä—Ç 5432)
            with self.common_conn.cursor() as cursor:
                cursor.execute("SELECT name, base_price FROM dishes WHERE id = %s AND is_active = true", (dish_id,))
                result = cursor.fetchone()
                if not result:
                    print(f"‚ùå –ë–ª—é–¥–æ ID {dish_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ")
                    return False

                dish_name, price = result

            # –®–∞–≥ 2: –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –§–ò–õ–ò–ê–õ–ê (–ø–æ—Ä—Ç 5433)
            with self.branch_conn.cursor() as cursor:
                cursor.execute("""
                    INSERT INTO orderitems (order_id, dish_id, quantity, price_at_time)
                    VALUES (%s, %s, %s, %s)
                """, (order_id, dish_id, quantity, price))

                # –û–±–Ω–æ–≤–∏—Ç—å –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
                cursor.execute("""
                    UPDATE orders SET total_amount = (
                        SELECT SUM(quantity * price_at_time) 
                        FROM orderitems 
                        WHERE order_id = %s
                    ) WHERE id = %s
                """, (order_id, order_id))

                self.branch_conn.commit()

            print(f"üçï '{dish_name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–∫–∞–∑ {order_id} ({quantity} x {price} —Ä—É–±.)")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–ª—é–¥–∞: {e}")
            return False

    def read_orders(self, status=None):
        """READ: –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –∏–∑ –±–∞–∑—ã —Ñ–∏–ª–∏–∞–ª–∞"""
        with self.branch_conn.cursor(cursor_factory=RealDictCursor) as cursor:
            if status:
                cursor.execute("""
                    SELECT o.*, e.first_name, e.last_name, t.table_number,
                           c.first_name as customer_name, c.last_name as customer_last_name
                    FROM orders o
                    LEFT JOIN employees e ON o.employee_id = e.id
                    LEFT JOIN tables t ON o.table_id = t.id
                    LEFT JOIN customers c ON o.customer_id = c.id
                    WHERE o.status = %s
                    ORDER BY o.order_date DESC
                """, (status,))
            else:
                cursor.execute("""
                    SELECT o.*, e.first_name, e.last_name, t.table_number,
                           c.first_name as customer_name, c.last_name as customer_last_name
                    FROM orders o
                    LEFT JOIN employees e ON o.employee_id = e.id
                    LEFT JOIN tables t ON o.table_id = t.id
                    LEFT JOIN customers c ON o.customer_id = c.id
                    ORDER BY o.order_date DESC
                """)

            orders = cursor.fetchall()
            print("üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:")
            for order in orders:
                status_emoji = {
                    '–ù–æ–≤—ã–π': 'üü°',
                    '–ì–æ—Ç–æ–≤': 'üü¢',
                    '–û–ø–ª–∞—á–µ–Ω': 'üîµ',
                    '–û—Ç–º–µ–Ω–µ–Ω': 'üî¥'
                }.get(order['status'], '‚ö™')

                customer = f"{order['customer_name']} {order['customer_last_name']}" if order[
                    'customer_name'] else "–ì–æ—Å—Ç—å"
                print(f"  {status_emoji} –ó–∞–∫–∞–∑ {order['id']}: –°—Ç–æ–ª {order['table_number']}, "
                      f"–ö–ª–∏–µ–Ω—Ç: {customer}, –°—É–º–º–∞: {order['total_amount']} —Ä—É–±.")
            return orders

    def update_order_status(self, order_id, new_status):
        """UPDATE: –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ —Ñ–∏–ª–∏–∞–ª–∞"""
        valid_statuses = ['–ù–æ–≤—ã–π', '–ì–æ—Ç–æ–≤', '–û–ø–ª–∞—á–µ–Ω', '–û—Ç–º–µ–Ω–µ–Ω']
        if new_status not in valid_statuses:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: {', '.join(valid_statuses)}")
            return

        with self.branch_conn.cursor() as cursor:
            cursor.execute("""
                UPDATE orders SET status = %s WHERE id = %s
            """, (new_status, order_id))
            self.branch_conn.commit()
            print(f"üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_status}")

    def read_order_details(self, order_id):
        """READ: –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ –æ–±–µ–∏—Ö –±–∞–∑"""
        with self.branch_conn.cursor(cursor_factory=RealDictCursor) as cursor:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –∏–∑ –±–∞–∑—ã —Ñ–∏–ª–∏–∞–ª–∞
            cursor.execute("""
                SELECT o.*, e.first_name, e.last_name, t.table_number,
                       c.first_name as customer_name, c.last_name as customer_last_name
                FROM orders o
                LEFT JOIN employees e ON o.employee_id = e.id
                LEFT JOIN tables t ON o.table_id = t.id
                LEFT JOIN customers c ON o.customer_id = c.id
                WHERE o.id = %s
            """, (order_id,))
            order = cursor.fetchone()

            if not order:
                print(f"‚ùå –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None, None

            # –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –±–ª—é–¥ –∏–∑ –æ–±—â–µ–π –±–∞–∑—ã
            cursor.execute("""
                SELECT oi.* 
                FROM orderitems oi
                WHERE oi.order_id = %s
            """, (order_id,))
            items = cursor.fetchall()

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥ –∏–∑ –û–ë–©–ï–ô –±–∞–∑—ã
        dish_names = {}
        if items:
            dish_ids = [item['dish_id'] for item in items]
            placeholders = ','.join(['%s'] * len(dish_ids))

            with self.common_conn.cursor(cursor_factory=RealDictCursor) as cursor:
                cursor.execute(f"""
                    SELECT id, name FROM dishes 
                    WHERE id IN ({placeholders})
                """, dish_ids)
                for dish in cursor.fetchall():
                    dish_names[dish['id']] = dish['name']

        print(f"\nüì¶ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ {order_id}:")
        print(f"  –°—Ç–æ–ª: {order['table_number']}")
        print(f"  –û—Ñ–∏—Ü–∏–∞–Ω—Ç: {order['first_name']} {order['last_name']}")
        print(f"  –ö–ª–∏–µ–Ω—Ç: {order['customer_name']} {order['customer_last_name']}")
        print(f"  –°—Ç–∞—Ç—É—Å: {order['status']}")
        print(f"  –û–±—â–∞—è —Å—É–º–º–∞: {order['total_amount']} —Ä—É–±.")
        print(f"  –ü–æ–∑–∏—Ü–∏–∏:")

        for item in items:
            dish_name = dish_names.get(item['dish_id'], f"–ë–ª—é–¥–æ #{item['dish_id']}")
            total = item['quantity'] * item['price_at_time']
            print(f"    - {dish_name}: {item['quantity']} x {item['price_at_time']} —Ä—É–±. = {total} —Ä—É–±.")

        return order, items

    def get_employee_info(self, employee_id):
        """READ: –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ"""
        with self.branch_conn.cursor(cursor_factory=RealDictCursor) as cursor:
            cursor.execute("""
                SELECT * FROM employees WHERE id = %s
            """, (employee_id,))
            employee = cursor.fetchone()
            return employee

    def get_table_info(self, table_id):
        """READ: –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–∏–∫–µ"""
        with self.branch_conn.cursor(cursor_factory=RealDictCursor) as cursor:
            cursor.execute("""
                SELECT * FROM tables WHERE id = %s
            """, (table_id,))
            table = cursor.fetchone()
            return table


def main():
    manager = CafeDatabaseManager()

    try:
        print("=" * 60)
        print("üè™ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø CRUD –û–ü–ï–†–ê–¶–ò–ô –î–õ–Ø –ö–ê–§–ï")
        print("   (2 –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä—Ç–∞—Ö)")
        print("=" * 60)

        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
        print("\n1. üìä –¢–ï–ö–£–©–ò–ï –î–ê–ù–ù–´–ï:")
        print("\n–ò–∑ –û–ë–©–ï–ô –±–∞–∑—ã (–ø–æ—Ä—Ç 5432):")
        manager.read_dishes()

        print("\n–ò–∑ –±–∞–∑—ã –§–ò–õ–ò–ê–õ–ê (–ø–æ—Ä—Ç 5433):")
        manager.read_customers()
        manager.read_orders()

        print("\n2. üÜï CREATE –û–ü–ï–†–ê–¶–ò–ò:")
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ —Ñ–∏–ª–∏–∞–ª–∞
        customer_id = manager.create_customer("–ê–Ω–Ω–∞", "–î–µ–º–æ", "+78005553535", "anna@demo.ru")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ —Ñ–∏–ª–∏–∞–ª–∞
        order_id = manager.create_order(employee_id=1, table_id=2, customer_id=customer_id)

        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑ (–º–µ–∂–±–∞–∑–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!)
        print("\n3. üîó –ú–ï–ñ–ë–ê–ó–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò:")
        manager.add_dish_to_order(order_id, 1, 2)  # –ë–ª—é–¥–æ –∏–∑ –æ–±—â–µ–π –±–∞–∑—ã
        manager.add_dish_to_order(order_id, 3, 1)  # –ë–ª—é–¥–æ –∏–∑ –æ–±—â–µ–π –±–∞–∑—ã
        manager.add_dish_to_order(order_id, 5, 1)  # –ë–ª—é–¥–æ –∏–∑ –æ–±—â–µ–π –±–∞–∑—ã

        print("\n4. üìñ READ –û–ü–ï–†–ê–¶–ò–ò:")
        manager.read_order_details(order_id)

        print("\n5. ‚úèÔ∏è UPDATE –û–ü–ï–†–ê–¶–ò–ò:")
        manager.update_order_status(order_id, "–ì–æ—Ç–æ–≤")
        manager.update_customer_loyalty(customer_id, 50)  # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã
        manager.update_dish_price(1, 480.00)  # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –æ–±—â–µ–π –±–∞–∑–µ

        print("\n6. üóëÔ∏è DELETE –û–ü–ï–†–ê–¶–ò–ò:")
        manager.deactivate_dish(7)  # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–ª—é–¥–æ –≤ –æ–±—â–µ–π –±–∞–∑–µ

        print("\n7. üìä –§–ò–ù–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï:")
        print("\n–û–±—â–∞—è –±–∞–∑–∞ (–ø–æ—Ä—Ç 5432):")
        manager.read_dishes()

        print("\n–ë–∞–∑–∞ —Ñ–∏–ª–∏–∞–ª–∞ (–ø–æ—Ä—Ç 5433):")
        manager.read_orders()
        manager.read_customers()

        print("\n" + "=" * 60)
        print("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("   cafe_common: localhost:5432")
        print("   cafe_branch_1: localhost:5433")
        print("=" * 60)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        manager.close_connections()


if __name__ == "__main__":
    main()